#!/usr/bin/env python3

# pyright: reportOptionalMemberAccess=false, pythonPlatform=All

"""
LibVirt network hook to configure systemd-resolved,
to resolve libvirt network addresses on local machine.
"""

import argparse
import logging
import ipaddress
import re
import os
import subprocess
import sys
from pathlib import Path
from shutil import which
import xml.etree.ElementTree as ET

# HOOK_LOGFILE = Path("/var/log/libvirt/qemu/hook-network-systemd-resolved-dns.log")


class LibVirtHookError(Exception):
    """Generic Libvirt Hook Error"""

    pass


class LibVirtHookResolvectlError(Exception):
    """
    resolvectl command error
    """

    pass

if os.getenv("DEBUG", 0) == "1":
    logging.basicConfig(
        format="%(asctime)s  [%(levelname)-8s] %(message)s",
        level=logging.DEBUG,
        datefmt="%Y-%m-%d %H:%M:%S%z",
    )
else:
    logging.basicConfig(
        format="%(asctime)s  [%(levelname)-8s] %(message)s",
        level=logging.INFO,
        datefmt="%Y-%m-%d %H:%M:%S%z",
    )


# TODO: Check if using dbus API is better instead of subprocess call
def run_resolvectl_hook(subcommand: str, interface: str, value: str):
    """Run resolvectl commands

    Args:
        subcommand (str): resolvectl subcommand
        interface (str): interface name
        value (str): value

    Raises:
        ValueError: Invalid arguments
        LibVirtHookResolvectlError: Generic exception when resolvectl command fails
    """
    if not isinstance(subcommand, str) or subcommand == "":
        raise ValueError("resolvectl subcommand must be a non empty string")

    if not isinstance(interface, str) or interface == "":
        raise ValueError("resolvectl interface must be a on empty string")

    if not isinstance(value, str):
        raise ValueError("resolvectl set-value must be of type string")

    logging.info(
        f"Resolvectl subcommand={subcommand} interface={interface}, value={value}"
    )

    resolvctl_path = which("resolvectl")
    if resolvctl_path is None:
        raise LibVirtHookResolvectlError(
            "resolvectl not found, are you using systemd-resolved as your resolver?"
        )

    try:
        proc = subprocess.Popen(
            args=["resolvectl", subcommand, interface, value],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            stdin=None,
        )
        try:
            outs, errs = proc.communicate(timeout=5)
            if proc.returncode != 0:
                raise LibVirtHookResolvectlError(
                    f"resolvectl errored out with returncode={proc.returncode} "
                    f"stdout={str(outs)}, stderr={str(errs)}"
                )
            else:
                logging.info(
                    f"resolvectl completed with returncode={proc.returncode} "
                    f"stdout={str(outs)}, stderr={str(errs)}"
                )
                return None

        except subprocess.TimeoutExpired:
            proc.kill()
            outs, errs = proc.communicate()

            raise LibVirtHookResolvectlError(
                f"resolvectl timed out with returncode={proc.returncode} "
                f"stdout={str(outs)}, stderr={str(errs)}"
            )

    except (subprocess.CalledProcessError) as e:
        raise LibVirtHookResolvectlError(
            f"resolvectl process failed with {str(e)}"
        )


def run(network: str = None, operation: str = None, sub_op: str = "-"):
    """
    Network Hook Runner

    Args:
        network (str, optional): Network name. Defaults to None.
        operation (str, optional): Network operation being performed. Defaults to None.
        sub_op (str, optional): Network sub operation being performed. Defaults to "-".

    Raises:
        LibVirtHookError: On Invlaid XMl, not valid arguments etc.
        LibVirtHookResolvectlError: On resolvectl command errors.
    """
    if network is None or str.strip(network) is False or network == "-":
        raise LibVirtHookError("Network name is not specified or is empty")

    if operation is None or str.strip(operation) is False or operation == "-":
        raise LibVirtHookError("Network state is not specified or is empty")

    logging.info(
        f"Network={network}, Operation={operation}, SubOperation={sub_op}"
    )

    # Get Hook data from stdin. We use this instead of libvirt API,
    # as we cannot call libvirt as libvirtd is waiting for hook to complete,
    # which might result in deadlock.
    try:
        hook_data_tree = ET.parse((sys.stdin))
    except (ET.ParseError, IOError, FileNotFoundError):
        raise LibVirtHookError(
            f"Failed to parse hook data XML for network - {network}."
        )

    # name
    try:
        libvirt_net_name = hook_data_tree.find("./network/name").text
        logging.info(f"%-30s: {libvirt_net_name}", "Network Name")
        if libvirt_net_name != network:
            logging.error(
                f"Network name from hook data({libvirt_net_name}) "
                f"does not match network specified({network}"
            )
            raise LibVirtHookError("NetworkNameMismatch")

    except (KeyError, AttributeError):
        raise LibVirtHookError(
            f"Network {network} is not defined in the hook data"
        )

    # forwarding check
    try:
        libvirt_net_fwd_mode = hook_data_tree.find("./network/forward").attrib[
            "mode"
        ]
        logging.info(f"%-30s: {libvirt_net_fwd_mode}", "Forward Mode")
        if libvirt_net_fwd_mode != "nat":
            logging.info(
                f"Network {network} is not setup in nat mode, "
                "skipping dns configuration."
            )
            return

    except (KeyError, AttributeError):
        logging.info(
            f"Network {network} is not configured as nat, skipping dns configuration"
        )
        return

    # bridge
    try:
        libvirt_net_bridge_interface = hook_data_tree.find(
            "./network/bridge"
        ).attrib["name"]
        logging.info(f"%-30s: {libvirt_net_bridge_interface}", "Bridge")
    except (KeyError, AttributeError):
        raise LibVirtHookError(f"Network {network} bridge not available")

    # dns server
    try:
        libvirt_net_gw_ip = hook_data_tree.find("./network/ip").attrib[
            "address"
        ]
        logging.info(f"%-30s: {libvirt_net_gw_ip}", "DNS Server IP")

        if ipaddress.ip_address(libvirt_net_gw_ip).version != 4:
            logging.error(f"No IPV4 network defined for {network}?")
            logging.error(f"Failed to parse IP4={libvirt_net_gw_ip}")
            return

    except (KeyError, AttributeError):
        raise LibVirtHookError(f"Network {network} hook data is invalid")

    # domain
    try:
        libvirt_net_domain = hook_data_tree.find("./network/domain").attrib[
            "name"
        ]
        logging.info(f"%-30s: {libvirt_net_domain}", "Domain")

        # Prevent any TLDs being used thier subdomains are fine but root tld is blocked.
        # Data is sourced

        # Validate domain name
        # For some reason domain name is not validated for libvirt
        dns_name_regex_pattern = (
            "^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}"
            + "[a-zA-Z0-9])(.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}"
            + "[a-zA-Z0-9]))*$"
        )
        dns_regex = re.compile(dns_name_regex_pattern)
        if not dns_regex.match(libvirt_net_domain):
            logging.error("Domain name {libvirt_net_domain} is invalid!")
            return

        logging.debug("Searching for PSL")
        psl_file = Path("/usr/share/publicsuffix/public_suffix_list.dat")

        psl_suffix_list = []
        if psl_file.exists() and psl_file.is_file():
            logging.info(f"Found PSL suffix data - {psl_file}")
            try:
                with open(psl_file, "rt") as f:
                    for line in f:
                        if (
                            not line.strip().startswith("#")
                            and not line.strip().startswith("//")
                            and not line.isspace()
                        ):
                            logging.debug(
                                f"Including suffix in disalowed list - {line.strip()}"
                            )
                            psl_suffix_list.append(line.strip())
            except IOError:
                logging.error(f"Failed to open - {psl_file}")

        else:
            logging.warning(f"File not found - {psl_file}")

        # Check against known tlds via ps_list
        for domain in psl_suffix_list:
            if domain.startswith("*."):
                if re.match(
                    pattern=f"^(.*).{domain.split(sep='.', maxsplit=1)[1]}$",
                    string=libvirt_net_domain,
                ):
                    logging.error(
                        "Network domain {libvirt_net_domain} "
                        "cannot be used, as it matches patten in the PSL list"
                    )
                    return
            elif domain == libvirt_net_domain:
                logging.error(
                    "Network domain {libvirt_net_domain} "
                    "cannot be used, as it is in the PSL list"
                )
                return
        else:
            logging.info(f"Network Domain {libvirt_net_domain} not in PSL list")

    except (KeyError, AttributeError):
        logging.warning(
            f"Network {network} is not configured with a domain name, "
            "skipping dns configuration"
        )
        return

    if not str.strip(libvirt_net_bridge_interface) or not str.strip(
        libvirt_net_gw_ip
    ):
        raise LibVirtHookError(f"Network {network} has no dns or bridge")

    # Setup
    # TODO: Check with upstream and check if it can be setup automatically
    # TODO: Check why domain name is not validated in libvirt
    if operation == "started" or operation == "updated":
        logging.info(
            f"Setting DNS={libvirt_net_gw_ip} on "
            f"Interface={libvirt_net_bridge_interface}"
        )
        try:
            run_resolvectl_hook(
                subcommand="dns",
                interface=libvirt_net_bridge_interface,
                value=libvirt_net_gw_ip,
            )
        except (LibVirtHookResolvectlError, ValueError) as e:
            logging.error(str(e))
            logging.error(
                f"Failed to set DNS={libvirt_net_gw_ip} "
                f"on Interface={libvirt_net_bridge_interface}"
            )

        logging.info(
            f"Set Domains={libvirt_net_domain} "
            f"on Interface={libvirt_net_bridge_interface}"
        )
        try:
            run_resolvectl_hook(
                subcommand="domain",
                interface=libvirt_net_bridge_interface,
                value=f"{libvirt_net_domain}",
            )
        except (LibVirtHookResolvectlError, ValueError) as e:
            logging.error(str(e))
            logging.error(
                f"Failed to set Domains={libvirt_net_domain} "
                f"on Interface={libvirt_net_bridge_interface}"
            )

        logging.info(
            f"Set DefaultRoute=no "
            f"on Interface={libvirt_net_bridge_interface}"
        )
        try:
            run_resolvectl_hook(
                subcommand="default-route",
                interface=libvirt_net_bridge_interface,
                value="no",
            )
        except (LibVirtHookResolvectlError, ValueError) as e:
            logging.error(str(e))
            logging.error(
                f"Failed to set DefaultRoute=no "
                f"on Interface={libvirt_net_bridge_interface}"
            )
    else:
        logging.info(f"Unsupported operation {operation}")
        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        add_help=True,
    )
    parser.add_argument(
        "network",
        default="-",
        type=str,
        metavar="NETWORK",
        help="Name of the libvirt network",
    )
    parser.add_argument(
        "op",
        default="-",
        type=str,
        metavar="OPERATION",
        help="Operation on the libvirt network being run",
    )
    parser.add_argument(
        "sub_op",
        default="-",
        type=str,
        metavar="SUB_OPERATION",
        help="Sub-operation on the libvirt network being run",
    )
    parser.add_argument(
        "extra_arg",
        default="-",
        type=str,
        metavar="EXTRA_ARG",
        help="EXTRA_ARG",
    )
    args = parser.parse_args()
    try:
        run(args.network, args.op, args.sub_op)
    except LibVirtHookError as e:
        logging.error(f"NetHook failed with - {str(e)}")
        sys.exit(1)
